import requests
from bs4 import BeautifulSoup
import time
import random as rand
import csv

# Find the ID of each company
def find_ids(search, headers, params, cookies):


    total = 0
    page_action = 0

    # Array of IDs gathered from each business listed on the char
    id_array = []

    # Viewstate value entered into POST
    viewstate = '',

    while True:
        
        # Data dictionary for the request POST
        data = {
        'ctl00_ctl00_RadStyleSheetManager_TSSM': ';Telerik.Web.UI, Version=2021.1.224.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:668347d1-93a2-4485-86a0-60eda4ba4fe2:ed2942d4:9e1572d6:45085116;Telerik.Web.UI.Skins, Version=2021.1.224.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:573f9d36-3267-486b-8c31-15cd157e7db4:21513f52',
        'ctl00_ctl00_externalWebRadScriptManager_TSM': ';;System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35:en-US:f7ba41a4-e843-4f12-b442-8e407f37c316:ea597d4b:b25378d2;Telerik.Web.UI, Version=2021.1.224.45, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en-US:668347d1-93a2-4485-86a0-60eda4ba4fe2:16e4e7cd:33715776:f7645509:24ee1bba:e330518b:2003d0b8:c128760b:1e771326:88144a7a:c8618e41:1a73651d:333f8d94:58366029:ed16cbdc',
        '__EVENTTARGET': '',
        '__EVENTARGUMENT': '',
        '__LASTFOCUS': '',
        '__VIEWSTATE': viewstate, #Viewstate value
        '__VIEWSTATEGENERATOR': 'EDA4642F',
        'ctl00_ctl00_AdditionalQuickLinksLeftMenu_ClientState': '',
        'ctl00$ctl00$ContentPlaceHolderMain$ContentPlaceHolderMainSingle$ppBESearch$bsPanel$ddlBESearchType': '0',
        'ctl00$ctl00$ContentPlaceHolderMain$ContentPlaceHolderMainSingle$ppBESearch$bsPanel$hfSelectedBESearchType': '0',
        'ctl00$ctl00$ContentPlaceHolderMain$ContentPlaceHolderMainSingle$ppBESearch$bsPanel$tbBusinessName': search, #Search whatever the user types in
        'ctl00$ctl00$ContentPlaceHolderMain$ContentPlaceHolderMainSingle$ppBESearch$bsPanel$ddlNameSearchMethod': '0',
        'ctl00$ctl00$ContentPlaceHolderMain$ContentPlaceHolderMainSingle$ppBESearch$bsPanel$cbActiveOnly': 'on',
        # SearchResultGrid is the location of the buttons for going to the next page of the table, the value of 4 at the
        # end tells the table to go to the next page so that the program can scrape the IDs of the companies and grab
        # the new Viewstate value
        'ctl00$ctl00$ContentPlaceHolderMain$ContentPlaceHolderMainSingle$ppBESearch$bsPanel$SearchResultGrid$ctl00$ctl02$ctl00$ctl0' + str(page_action): ' ',
        'ctl00_ctl00_ContentPlaceHolderMain_ContentPlaceHolderMainSingle_ppBESearch_bsPanel_SearchResultGrid_ClientState': '',
        'ctl00$ctl00$ContentPlaceHolderMain$ContentPlaceHolderMainSingle$ppBESearch$bsPanel$hfGridRowKeyID': '193889',
        'ctl00$ctl00$ContentPlaceHolderMain$ContentPlaceHolderMainSingle$ppBESearch$bsPanel$hfGridItemRowNumber': '10',
        'ctl00$ctl00$ContentPlaceHolderMain$ContentPlaceHolderMainSingle$ppBESearch$bsPanel$hfGridPrevRowSWEntityID': '8607061',
        'ctl00$ctl00$ContentPlaceHolderMain$ContentPlaceHolderMainSingle$ppBESearch$hdnBusinessEntitySearchControlID': 'ctl00_ctl00_ContentPlaceHolderMain_ContentPlaceHolderMainSingle_ppBESearch_bsPanel_stdbtnSearch_LinkStandardButton'
        }

        #Create session for request and send POST to url
        session = requests.Session()
        response_ids = session.post('https://bsd.sos.mo.gov/BusinessEntity/BESearch.aspx', headers=headers, params=params, cookies=cookies, data=data)

        #Parse the html data
        soup = BeautifulSoup(response_ids.text, 'html.parser')

        #Find the new value for viewstate so that the page will be reloaded after the first chart is parsed
        viewstate = soup.find("input", id = "__VIEWSTATE") 

        #Set new value for viewstate
        viewstate = viewstate.get('value')

        #Find company names and values from the table
        table = soup.find_all("tr")

        #Checks the page number to find the end of the chart
        page = soup.find("div", class_="rgWrap rgInfoPart")

        #Loops through table entries
        for i in table:
            #Filters out companies' past names
            if("False" in i.text or "page" in i.text ):
                continue

            #Finds the href value within the table rows
            id_value = i.find("td", class_='border-top-light-gray')
            if(id_value):
                # Appends the ID value to the id_array
                id_array.append(id_value.text)
                total += 1
                print("Total companies gathered: " + str(total), end='\r')

            #------------FIX------------------
            # Checks to see if there aren't any companies left
            if("Page 82 of 82" in page.text):
                response_ids.close()
                return(id_array)

        # Setting the page_action to 4 so that the table goes to the next page
        page_action = 4

#Crates the url for each ID found
def find_id_url(id_array):

    # Array for each url
    url_array = []
    # Base url
    url = "https://bsd.sos.mo.gov/BusinessEntity/BusinessEntityDetail.aspx?page=beSearch&ID="

    with open("url.txt", "w") as url_file:
    # Appends each url into the url array so that they can be parsed seperately
        for id in id_array: 
                url_file.write(url + id + '\n')
        #url_file.close()
    return url_array

# Parses through the websites to find specific details
def parse_website(url_array, headers, params, cookies):

    # Tallies how many successful and failed scrapes there are
    parsed_website_total = 0
    failed_total = 0
    total_attempts = 0

    # Opens a csv file (data.csv)
    with open('data.csv', 'w', newline = '') as f_object:

        # Iterates through the array of urls
        for url in url_array:

            #Creates array for each of the company value sets
            value_list = []
            #Prints url that's about to be parsed so user can see it's working
            print(url)

            # Pauses the parsing so that the server does not recognize a bot
            sleep_time = rand.randint(10,30)
            time.sleep(sleep_time)

            # Locations for each piece of data 
            name_id = 'ctl00_ctl00_ContentPlaceHolderMain_ContentPlaceHolderMainSingle_ppBEDetail_lBENameValue'
            charter_id = 'ctl00_ctl00_ContentPlaceHolderMain_ContentPlaceHolderMainSingle_ppBEDetail_lBEBINValue'
            type_id = 'ctl00_ctl00_ContentPlaceHolderMain_ContentPlaceHolderMainSingle_ppBEDetail_lBETypeValue'
            domestic_id = 'ctl00_ctl00_ContentPlaceHolderMain_ContentPlaceHolderMainSingle_ppBEDetail_lDomesticityValue'
            state_id = 'ctl00_ctl00_ContentPlaceHolderMain_ContentPlaceHolderMainSingle_ppBEDetail_lStateCountryValue'
            registered_agent_id = 'ctl00_ctl00_ContentPlaceHolderMain_ContentPlaceHolderMainSingle_ppBEDetail_cellRegAgentValue'
            creation_date_id = 'ctl00_ctl00_ContentPlaceHolderMain_ContentPlaceHolderMainSingle_ppBEDetail_lCreatedValue'

            # Creates session and sends the GET request with the values
            session = requests.session()
            response_data = session.post(url, headers=headers, params=params, cookies=cookies)

            soup = BeautifulSoup(response_data.text, 'html.parser')
            
            try:
                # Finds each piece of data and pulls them from the website
                name = soup.find("span", id = name_id)
                charter = soup.find("span", id = charter_id)
                company_type = soup.find("span", id = type_id)
                domestic = soup.find("span", id = domestic_id)
                state = soup.find("span", id = state_id)
                creation_date = soup.find("span", id = creation_date_id)

                try:
                    # Registered Agent was stored in a couple different locations so this checks both
                    registered_agent_start = soup.find("div", id = registered_agent_id)
                    registered_agent = registered_agent_start.find("a")

                    if(registered_agent == None):
                        registered_agent = registered_agent_start.find("span")

                    # Appends values for each company to the value list if registered agent wasn't found in the normal location
                    value_list.extend([name.text, charter.text, company_type.text, domestic.text, state.text, creation_date.text, registered_agent.text])

                    # Writes the list to the data.csv file
                    write_to_file(f_object, value_list, total_attempts)
                    parsed_website_total += 1
                    total_attempts += 1

                except:
                    # If registered agent cant be found, it adds "No registered agent" instead
                    registered_agent = "No registered agent"

                    # Appends values for each company to the value list if registered agent was nonexistant
                    value_list.extend([name.text, charter.text, company_type.text, domestic.text, state.text, creation_date.text, registered_agent])
            
                    # Writes the list to the data.csv file
                    write_to_file(f_object, value_list, total_attempts)
                    parsed_website_total += 1
                    total_attempts += 1

            except:
                # If no company data could be gathered for some reason, tells the user then adds the
                # FAILED_TO_PARSE_DATA into the file instead
                print("Couldn't gather company data")
                value_list.append("####################FAILED_TO_PARSE_DATA######################")
                write_to_file(f_object, value_list, total_attempts)
                failed_total += 1
                total_attempts += 1
                continue
        
        # Prints the number of websites successfully parsed and the number of those that failed
        print("Total attempts: " + str(total_attempts))
        print("Websites parsed: " + str(parsed_website_total))
        print("Failed: " + str(failed_total))

    # Closes the csv file and the request
    f_object.close()


# Writes data to the csv file
def write_to_file(f_object, data, row):

    # Header
    header = ["NAME", "CHARTER", "COMPANY_TYPE", "LOCATION", "STATE", "CREATION_DATE", "REGISTERED_AGENT"]
    
    # Creating writer object
    writer_object = csv.writer(f_object)

    # If it's the first iteration, then it adds the header file
    if(row < 1):
        writer_object.writerow(header)

    # Adds data into the file
    writer_object.writerow(data)




def main():

    # Dictionaries for the request
    cookies = {
    'tars_widget': '%7B%22widget_opened%22%3Atrue%2C%22widget_opened_ts%22%3A1637379284355%7D',
    '_ga': 'GA1.2.463110554.1636941536',
    'ASP.NET_SessionId': 'vft5szmmiwan3xcjy5boctpd',
    'loggedInLobIDCookie': '1',
    'tw_co_rcOZLj': '%7B%22widget_opened%22%3Atrue%7D',
    '_gid': 'GA1.2.386121303.1637259311',
    }

    headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:94.0) Gecko/20100101 Firefox/94.0',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Referer': 'https://bsd.sos.mo.gov/BusinessEntity/BESearch.aspx?SearchType=0',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Origin': 'https://bsd.sos.mo.gov',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'same-origin',
        'Sec-Fetch-User': '?1',
    }

    params = (
            ('SearchType', '0'),
        )

    business_search = input("Enter name for a business: ")
    print("Business found")
    id_array = find_ids(business_search, headers, params, cookies)
    print("IDs successfully gathered")
    find_id_url(id_array)
    print("URLs successfully generated")

    url_array = []
    with open("url.txt", "r") as url_file:
        for line in url_file:
            url_array.append(line)

    parse_website(url_array, headers, params, cookies)
    print("Websites successfully parsed")
    
main()




